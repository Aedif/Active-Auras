{"_id":"6jrmikctWl5kbeke","name":"AA Cloudkill","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) {ui.notifications.error(\"Advanced Macros is not enabled\"); return}\n\nlet lastArg = args[args.length - 1];\nlet target = canvas.tokens.get(lastArg.tokenId);\nlet tactor = target?.actor;\nlet DC = parseInt(args[1])\nif(args[0] === \"on\" || args[0] === \"each\"){\nconst flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC ${DC} Cloudkill }`;\n    let saveRoll = (await tactor.rollAbilitySave(\"con\", {flavor, fastforward: true}))?.total;\n    if(!saveRoll) return;\n    let damageRoll = new Roll(\"5d8[poison]\").roll();\n    damageRoll.toMessage({flavor: \"Cloudkill Damage\")\n    let targets = new Set()\n    targets.add(target)\n    let saves = new Set;\n    if (saveRoll > args[1]) {\n        saves.add(target)\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total/2, type: \"poison\" }], damageRoll.total, targets, null, saves);\n    }\n    else{\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"poison\" }], damageRoll.total, targets, null, saves);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.YFpaXmfMg52In2h8"}}}
{"_id":"9PaVurYY2AKAu50c","name":"AA InsectPlague","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) {ui.notifications.error(\"Advanced Macros is not enabled\"); return}\n\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC${args[1]} Insect Plague}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"con\", { flavor })).total;\n    let damageRoll = new Roll(`${args[2] - 1}d10[piercing]`).evaluate()\n    damageRoll.toMessage({flavor: \"Insect Plague Damage\")\n    let targets = new Set()\n    targets.add(target)\n    let saves = new Set;\n    if (saveRoll > args[1]) {\n        saves.add(target)\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total/2, type: \"piercing\" }], damageRoll.total, targets, null, saves);\n    }\n    else{\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"piercing\" }], damageRoll.total, targets, null, saves);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.dotwq0M7vKllDoG4"}}}
{"_id":"CEkHkJkEZV4FTnsr","name":"AA Apply effect to drawing","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"// Standard Hotbar macro to apply an active effect from a given actor (default Zone Effects) to a selected drawing\n// Change the actor name as required \n\n\nlet effectActor = game.actors.getName(\"Zone Effects\")\nlet effects = effectActor.effects.entries\nlet drawing = canvas.drawings.controlled[0]\nlet content\nfor ( let effect of effects) {\ncontent  += `<option value=${effect.id}>${effect.data.label}</option>`;\n}\nnew Dialog({\n    title: 'Example',\n    content: `\n          <form class=\"flexcol\">\n            <div class=\"form-group\">\n              <select id=\"effect\">\n              ${content}\n              </select>\n            </div>\n          </form>\n        `,\n    buttons: {\n      apply: {\n          label: \"Apply\",\n          callback: async (html) => {\n            let effectId = html.find('#effect').val();\n            let effect = effects.find(i => i.id === effectId)\n            effect.data.origin = `Actor.${effectActor.id}`\n            await drawing.setFlag(\"ActiveAuras\", \"IsAura\", [effect.data])\n            AAhelpers.UserCollateAuras(canvas.scene._id, true, false, \"drawingAdd\")\n          }\n      }\n    }\n}).render(true)","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.RukVihRspPDZRSKM"},"advanced-macros":{"runAsGM":false}}}
{"_id":"OkVWJrRByiHKxE5w","name":"AA SpiritGuardians","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) {ui.notifications.error(\"Advanced Macros is not enabled\"); return}\n\nlet lastArg = args[args.length - 1];\nlet target = canvas.tokens.get(lastArg.tokenId);\nlet tactor = target?.actor;\nlet DC = parseInt(args[1])\nlet damageDice = args[2]\nif (lastArg.efData.origin.includes(lastArg.actorId)) return;\nif (args[0] === \"each\" || args[0] === \"on\") {\n    if (target.id !== game.combats.active.current.tokenId) return;\n    const flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC ${DC} Spirit Guardians}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"wis\", { flavor, fastforward: true })).total;\n    let damageRoll = new Roll(`${damageDice}d8[radiant]`).evaluate()\ndamageRoll.toMessage({flavor: \"Spirit Guardians Damage\"});\n    let targets = new Set()\n    targets.add(target)\n    let saves = new Set;\n    if (saveRoll > args[1]) {\n        saves.add(target)\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total / 2, type: \"radiant\" }], damageRoll.total, targets, null, saves);\n    }\n    else {\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"radiant\" }], damageRoll.total, targets, null, saves);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.0zfFjiC40MiPEQWU"}}}
{"_id":"RNbf4zLs7IQL662k","name":"AA Grease","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) {ui.notifications.error(\"Advanced Macros is not enabled\"); return}\nif (!game.modules.get(\"combat-utility-belt\")?.active) {ui.notifications.error(\"CUB is not enabled\"); return}\n\nif (args[0] === \"on\") {\n\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} Grease}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor }))?.total;\n    if (saveRoll < args[1]) {\n        game.cub.addCondition(\"Prone\", target)\n    }\n}\n\nelse if (args[0] === \"each\") {\n\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const DAEitem = lastArg.efData.flags.dae.itemData\n    const saveData = DAEitem.data.save\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} ${DAEitem?.name || \"\"}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor }))?.total;\n    if (saveRoll < args[1]) {\n        game.cub.addCondition(\"Prone\", target)\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.M6BXTCUueDACm0d0"}}}
{"_id":"RiysvLwCnhPSO6CB","name":"AA BlackTentacles","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) {ui.notifications.error(\"Advanced Macros is not enabled\"); return}\nif (!game.modules.get(\"combat-utility-belt\")?.active) {ui.notifications.error(\"CUB is not enabled\"); return}\nif (!game.modules.get(\"times-up\")?.active) {ui.notifications.error(\" Times up is not enabled\"); return}\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} \"Black Tentacles\"}`;\n    let res = game.cub.hasCondition(\"Restrained\")\n    if (!res) {\n        var saveRoll = (await tactor.rollAbilitySave(\"con\", { flavor }))?.total;\n        if (!saveRoll) return;\n    }\n    else if (res) {\n        var saveRoll = 0\n    }\n    let damageRoll = new Roll(`3d6[bludgeoning]`).evaluate()\n    damageRoll.toMessage({flavor: \"Black Tentacles Damage\")\n    let targets = new Set();\n    let saves = new Set();\n    targets.add(target);\n    saves.add(target);\n    if (saveRoll > args[1]) {\n        saves.add(target)\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total/2, type: \"bludgeoning\" }], damageRoll.total, targets, null, saves);\n        if(!res)game.cub.addCondition(\"Restrained\", target)\n    }\n    else{\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"bludgeoning\" }], damageRoll.total, targets, null, saves);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.J6CwGzCf7SUjEDZ5"}}}
{"name":"AA DoT","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.nsfe0IvUwY7JP4ya"}},"scope":"global","command":"if(args[0] === \"on\") {\nlet damageRoll = new Roll(`${args[1]}`).roll().toMessage({flavor: `${args[2]}`})\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"TWJ7K9Rw384oXFxV"}
{"_id":"UwyXiTHK3Q518uLm","name":"AA ApplyEffectsToTemplate","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"//On use macro to apply an item's active effects to the placed template instead of applying through the normal midi QoL workflow \n// requires midi qol, furnace and Active Auras \nlet template = canvas.templates.get(args[0].templateId)\nlet disposition = args[0].actor.token.disposition\nlet effects = args[0].item.effects\nlet templateEffectData = []\nfor( let effect of effects){\n   let data = { data: duplicate(effect), parentActorId: false, parentActorLink: false, entityType: \"template\", entityId:template.id, casterDisposition: disposition, castLevel: args[0].spellLevel}\ndata.data.origin = `Actor.${args[0].actor._id}.Item.${args[0].item._id}`\n   templateEffectData.push(data)\n}\nawait template.setFlag(\"ActiveAuras\", \"IsAura\", templateEffectData)\nAAhelpers.UserCollateAuras(canvas.scene._id, true, false, \"spellCast\")\nreturn  {haltEffectsApplication: true}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.fHwT4N13IcbW4D3I"},"advanced-macros":{"runAsGM":false}}}
{"_id":"VoqrqnOQoa9zSFkt","name":"AA Moonbeam","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) {ui.notifications.error(\"Advanced Macros is not enabled\"); return}\n\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} \"Moonbeam\"}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor })).total;\n    let damageRoll =  new Roll(`${args[2]}d10[radiant]`).roll()\n    damageRoll.toMessage({flavor: \"Moonbeam Damage\")\n    let targets = new Set();\n    let saves = new Set();\n    targets.add(target);\n    saves.add(target);\n    if (saveRoll > args[1]) {\n        saves.add(target)\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total/2, type: \"radiant\" }], damageRoll.total, targets, null, saves);\n    }\n    else{\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"radiant\" }], damageRoll.total, targets, null, saves);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.wWR0eKHRS4cbJu6b"}}}
{"_id":"Za56rGv4xz4equqx","name":"AA IncendiaryCloud","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) {ui.notifications.error(\"Advanced Macros is not enabled\"); return}\n\n\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} Incendiary Cloud}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor })).total;\n    let damageRoll = new Roll(`10d8[fire]`).evaluate()\n    damageRoll.toMessage({flavor: \"Incendiary Cloud Damage\")\n    let targets = new Set()\n    targets.add(target)\n    let saves = new Set;\n    if (saveRoll > args[1]) {\n        saves.add(target)\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total/2, type: \"fire\" }], damageRoll.total, targets, null, saves);\n    }\n    else{\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"fire\" }], damageRoll.total, targets, null, saves);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.lzYDA5jNvpnnNJCf"}}}
{"_id":"gh40uBRN6kToXrLZ","name":"AA StinkingCloud","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) {ui.notifications.error(\"Advanced Macros is not enabled\"); return}\n\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    if (tactor.data.data.traits.di.value.includes(\"poison\")) return\n    const flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC${args[1]} Stinking Cloud`;\n    let saveRoll = (await tactor.rollAbilitySave(\"con\", { flavor }))?.total;\n    if(!saveRoll) return;\n\n    if (saveRoll < args[1]) {\n        ChatMessage.create({ content: `${token.name} spends its turn doing nothing` })\n    } else {\n        ChatMessage.create({ content: `${token.name} saves against Stinking Cloud` })\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.muUKx4rkxJpln4vp"},"advanced-macros":{"runAsGM":false}}}
{"name":"AA SleetStorm","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.UcFyJEFjypjafZQH"}},"scope":"global","command":"if (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} Sleet Storm`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor }))?.total;\n    if(!saveRoll) return;\n    if (saveRoll < args[1]) {\n        game.cub.addCondition(\"Prone\", target)\n    }\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"xWy9rgoadmnmZxhy"}
{"_id":"zv2pCexLT2ydNPKo","name":"AA SpikeGrowth","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) {ui.notifications.error(\"Advanced Macros is not enabled\"); return}\n\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    let damageRoll = new Roll(`2d4[piercing]`).evaluate()\n    damageRoll.toMessage({flavor: \"Spike Growth Damage\")\n    let targets = new Set();\n    let saves = new Set();\n    targets.add(target);\n    saves.add(target);\n    await MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"piercing\" }], damageRoll.total, targets, null, saves);\n    let effect = tactor.effects.find(i => i.data.label === \"Spike Growth\")\n    await effect.delete()\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.DR7cH7FzoLAIFGMI"},"advanced-macros":{"runAsGM":false}}}
{"_id":"RiysvLwCnhPSO6CB","name":"AA BlackTentacles","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) { ui.notifications.error(\"Advanced Macros is not enabled\"); return }\nif (!game.modules.get(\"combat-utility-belt\")?.active) { ui.notifications.error(\"CUB is not enabled\"); return }\nif (!game.modules.get(\"times-up\")?.active) { ui.notifications.error(\" Times up is not enabled\"); return }\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} \"Black Tentacles\"}`;\n    let res = game.cub.hasCondition(\"Restrained\")\n    if (!res) {\n        var saveRoll = (await tactor.rollAbilitySave(\"con\", { flavor }))?.total;\n        if (!saveRoll) return;\n    }\n    else if (res) {\n        var saveRoll = 0\n    }\n    let damageRoll = new Roll(`3d6[bludgeoning]`).evaluate()\n    damageRoll.toMessage({ flavor: \"Black Tentacles Damage\"})\n    let targets = new Set();\n    let saves = new Set();\n    targets.add(target);\n    saves.add(target);\n    if (saveRoll > args[1]) {\n        saves.add(target)\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total / 2, type: \"bludgeoning\" }], damageRoll.total, targets, null, saves);\n        if (!res) game.cub.addCondition(\"Restrained\", target)\n    }\n    else {\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"bludgeoning\" }], damageRoll.total, targets, null, saves);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.J6CwGzCf7SUjEDZ5"}}}
{"_id":"6jrmikctWl5kbeke","name":"AA Cloudkill","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) { ui.notifications.error(\"Advanced Macros is not enabled\"); return }\n\nlet lastArg = args[args.length - 1];\nlet target = canvas.tokens.get(lastArg.tokenId);\nlet tactor = target?.actor;\nlet DC = parseInt(args[1])\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC ${DC} Cloudkill }`;\n    let saveRoll = (await tactor.rollAbilitySave(\"con\", { flavor, fastforward: true }))?.total;\n    if (!saveRoll) return;\n    let damageRoll = new Roll(\"5d8[poison]\").roll();\n    damageRoll.toMessage({ flavor: \"Cloudkill Damage\" })\n    let targets = new Set()\n    targets.add(target)\n    let saves = new Set;\n    if (saveRoll > args[1]) {\n        saves.add(target)\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total / 2, type: \"poison\" }], damageRoll.total, targets, null, saves);\n    }\n    else {\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"poison\" }], damageRoll.total, targets, null, saves);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.YFpaXmfMg52In2h8"}}}
{"_id":"RNbf4zLs7IQL662k","name":"AA Grease","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) { ui.notifications.error(\"Advanced Macros is not enabled\"); return }\nif (!game.modules.get(\"combat-utility-belt\")?.active) { ui.notifications.error(\"CUB is not enabled\"); return }\n\nif (args[0] === \"on\") {\n\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} Grease}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor }))?.total;\n    if (saveRoll < args[1]) {\n        game.cub.addCondition(\"Prone\", target)\n    }\n}\n\nelse if (args[0] === \"each\") {\n\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const DAEitem = lastArg.efData.flags.dae.itemData\n    const saveData = DAEitem.data.save\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} ${DAEitem?.name || \"\"}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor }))?.total;\n    if (saveRoll < args[1]) {\n        game.cub.addCondition(\"Prone\", target)\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.M6BXTCUueDACm0d0"}}}
{"_id":"9PaVurYY2AKAu50c","name":"AA InsectPlague","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) { ui.notifications.error(\"Advanced Macros is not enabled\"); return }\n\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC${args[1]} Insect Plague}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"con\", { flavor })).total;\n    let damageRoll = new Roll(`${args[2] - 1}d10[piercing]`).evaluate()\n    damageRoll.toMessage({ flavor: \"Insect Plague Damage\" })\n    let targets = new Set()\n    targets.add(target)\n    let saves = new Set;\n    if (saveRoll > args[1]) {\n        saves.add(target)\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total / 2, type: \"piercing\" }], damageRoll.total, targets, null, saves);\n    }\n    else {\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"piercing\" }], damageRoll.total, targets, null, saves);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.dotwq0M7vKllDoG4"}}}
{"_id":"VoqrqnOQoa9zSFkt","name":"AA Moonbeam","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) { ui.notifications.error(\"Advanced Macros is not enabled\"); return }\n\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} \"Moonbeam\"}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor })).total;\n    let damageRoll = new Roll(`${args[2]}d10[radiant]`).roll()\n    damageRoll.toMessage({ flavor: \"Moonbeam Damage\" })\n    let targets = new Set();\n    let saves = new Set();\n    targets.add(target);\n    saves.add(target);\n    if (saveRoll > args[1]) {\n        saves.add(target)\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total / 2, type: \"radiant\" }], damageRoll.total, targets, null, saves);\n    }\n    else {\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"radiant\" }], damageRoll.total, targets, null, saves);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.wWR0eKHRS4cbJu6b"}}}
{"_id":"zv2pCexLT2ydNPKo","name":"AA SpikeGrowth","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) { ui.notifications.error(\"Advanced Macros is not enabled\"); return }\n\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    let damageRoll = new Roll(`2d4[piercing]`).evaluate()\n    damageRoll.toMessage({ flavor: \"Spike Growth Damage\" })\n    let targets = new Set();\n    let saves = new Set();\n    targets.add(target);\n    saves.add(target);\n    await MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"piercing\" }], damageRoll.total, targets, null, saves);\n    let effect = tactor.effects.find(i => i.data.label === \"Spike Growth\")\n    await effect.delete()\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.DR7cH7FzoLAIFGMI"},"advanced-macros":{"runAsGM":false}}}
{"_id":"gh40uBRN6kToXrLZ","name":"AA StinkingCloud","type":"script","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","scope":"global","command":"if (!game.modules.get(\"advanced-macros\")?.active) { ui.notifications.error(\"Advanced Macros is not enabled\"); return }\n\nif (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    if (tactor.data.data.traits.di.value.includes(\"poison\")) return\n    const flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC${args[1]} Stinking Cloud`;\n    let saveRoll = (await tactor.rollAbilitySave(\"con\", { flavor }))?.total;\n    if (!saveRoll) return;\n\n    if (saveRoll < args[1]) {\n        ChatMessage.create({ content: `${token.name} spends its turn doing nothing` })\n    } else {\n        ChatMessage.create({ content: `${token.name} saves against Stinking Cloud` })\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"E4BVikjIkVl2lL2j":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.muUKx4rkxJpln4vp"},"advanced-macros":{"runAsGM":false}}}
