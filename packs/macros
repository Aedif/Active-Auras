{"name":"AA Grease","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.M6BXTCUueDACm0d0"}},"scope":"global","command":"debugger\nif (args[0] === \"on\") {\n\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} Grease}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor }))?.total;\n    if (saveRoll < args[1]) {\n        game.cub.addCondition(\"Prone\", target)\n    }\n}\n\nelse if (args[0] === \"each\") {\n\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const DAEitem = lastArg.efData.flags.dae.itemData\n    const saveData = DAEitem.data.save\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} ${DAEitem?.name || \"\"}`;\nlet saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor }))?.total;\n    if (saveRoll < args[1]) {\n        game.cub.addCondition(\"Prone\", target)\n    }\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"2E12cd6cSJyqKck5"}
{"name":"AA Moonbeam","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.wWR0eKHRS4cbJu6b"}},"scope":"global","command":"if (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} \"Moonbeam\"}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor }))?.total;\n    if(!saveRoll) return;\n    let damageRoll =  new Roll(`${args[2]}d10`).roll()\n    game.dice3d?.showForRoll(damageRoll)\n    let targets = new Set();\n    let saves = new Set();\n    targets.add(target);\n    saves.add(target);\n    if (saveRoll < args[1]) {\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"radiant\" }], damageRoll.total, targets, null, saves);\n    }\n    else if(saveRoll >= args[1]){\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total/2, type: \"radiant\" }], damageRoll.total, targets, null, saves);\n\n    }\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"2MRSqwQSlcsHXayW"}
{"name":"AA SpiritGuardians","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.0zfFjiC40MiPEQWU"}},"scope":"global","command":"let lastArg = args[args.length - 1];\nlet target = canvas.tokens.get(lastArg.tokenId);\nlet tactor = target?.actor;\nlet DC = parseInt(args[1])\nlet damageDice = args[2]\ndebugger\nif(args[0] === \"each\" || args[0] === \"on\"){\nconst flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC ${DC} Spirit Guardians}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"wis\", {flavor, fastforward: true})).total;\n    let damageRoll = new Roll(`${damageDice}d8`).roll();\n    let halfDamage = Math.floor(damageRoll.total/2);\n\n    if(saveRoll < DC ) {\n        new MidiQOL.DamageOnlyWorkflow(tactor, target, damageRoll.total, \"radiant\", [target], damageRoll, {flavor: \"Spirit Guardains full damage\", damageList: args[0].damageList});\n\n    }\n    if(saveRoll >= DC) {\n        new MidiQOL.DamageOnlyWorkflow(tactor, target, halfDamage, \"radiant\", [target], damageRoll, {flavor: \"Spirit Guardainshalf damage\", damageList: args[0].damageList});\n    }\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"BGAxcmLBcjgOhaNi"}
{"name":"AA BlackTentacles","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.J6CwGzCf7SUjEDZ5"}},"scope":"global","command":"if (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} \"Cloudkill\"}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"con\", { flavor }))?.total;\n    if(!saveRoll) return;\n    let damageRoll =  new Roll(`${args[2]}d8`).roll()\n    game.dice3d?.showForRoll(damageRoll)\n    let targets = new Set();\n    let saves = new Set();\n    targets.add(target);\n    saves.add(target);\n    if (saveRoll < args[1]) {\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"poison\" }], damageRoll.total, targets, null, saves);\n    }\n    else if(saveRoll >= args[1]){\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total/2, type: \"poison\" }], damageRoll.total, targets, null, saves);\n\n    }\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"Sjz8fn1eD0OqyJDQ"}
{"name":"AA DoT","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.nsfe0IvUwY7JP4ya"}},"scope":"global","command":"if(args[0] === \"on\") {\nlet damageRoll = new Roll(`${args[1]}`).roll().toMessage({flavor: `${args[2]}`})\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"TWJ7K9Rw384oXFxV"}
{"name":"AA IncendiaryCloud","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.lzYDA5jNvpnnNJCf"}},"scope":"global","command":"if (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} Incendiary Cloud}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor }))?.total;\n    if(!saveRroll) return;\n    let damageRoll = new Roll(`10d8`).roll()\n    game.dice3d?.showForRoll(damageRoll)\n    let targets = new Set();\n    let saves = new Set();\n    targets.add(target);\n    saves.add(target);\n    if (saveRoll < args[1]) {\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"fire\" }], damageRoll.total, targets, null, saves);\n    }\n    else if (saveRoll >= args[1]) {\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total / 2, type: \"fire\" }], damageRoll.total, targets, null, saves);\n\n    }\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"UAviV9weYmJXwDAr"}
{"name":"AA ApplyEffectsToTemplate","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.fHwT4N13IcbW4D3I"}},"scope":"global","command":"//On use macro to apply an item's active effects to the placed template instead of applying through the normal midi QoL workflow \n// requires midi qol, furnace and Active Auras \nlet template = canvas.templates.get(args[0].templateId)\nlet disposition = args[0].actor.token.disposition\nlet effects = args[0].item.effects\nlet templateEffectData = []\nfor( let effect of effects){\n   let data = { data: duplicate(effect), parentActorId: false, parentActorLink: false, entityType: \"template\", entityId:template.id, casterDisposition: disposition, castLevel: args[0].spellLevel}\n   templateEffectData.push(data)\n}\nawait template.setFlag(\"ActiveAuras\", \"IsAura\", templateEffectData)\nActiveAuras.CollateAuras(canvas.scene._id, true, false, \"spellCast\")\nreturn  {haltEffectsApplication: true}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"UwyXiTHK3Q518uLm"}
{"name":"AA Cloudkill","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.YFpaXmfMg52In2h8"}},"scope":"global","command":"let lastArg = args[args.length - 1];\nlet target = canvas.tokens.get(lastArg.tokenId);\nlet tactor = target?.actor;\nlet DC = parseInt(args[1])\nif(args[0] === \"on\"){\nconst flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC ${DC} Cloudkill }`;\n    let saveRoll = (await tactor.rollAbilitySave(\"con\", {flavor, fastforward: true})).total;\n    let damageRoll = new Roll(\"5d8\").roll();\n    let halfDamage = Math.floor(damageRoll.total/2);\n\n    if(saveRoll < DC ) {\n        new MidiQOL.DamageOnlyWorkflow(tactor, target, damageRoll.total, \"poison\", [target], damageRoll, {flavor: \"Cloudkill full damage\", damageList: args[0].damageList});\n\n    }\n    if(saveRoll >= DC) {\n        new MidiQOL.DamageOnlyWorkflow(tactor, target, halfDamage, \"piercing\", [target], damageRoll, {flavor: \"Cloudkill half damage\", damageList: args[0].damageList});\n    }\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"W7bq74uoIqIGWJKY"}
{"name":"AA StinkingCloud","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.muUKx4rkxJpln4vp"}},"scope":"global","command":"if (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    if (tactor.data.data.traits.di.value.includes(\"poison\")) return\n    const flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC${args[1]} Stinking Cloud`;\n    let saveRoll = (await tactor.rollAbilitySave(\"con\", { flavor }))?.total;\n    if(!saveRoll) return;\n\n    if (saveRoll < args[1]) {\n        ChatMessage.create({ content: `${token.name} spends its turn doing nothing` })\n    } else {\n        ChatMessage.create({ content: `${token.name} saves against Stinking Cloud` })\n    }\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"gh40uBRN6kToXrLZ"}
{"_id":"k5D9wZ3qs2HWiu8m","name":"AA Apply effect to drawing","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.RukVihRspPDZRSKM"},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Standard Hotbar macro to apply an active effect from a given actor (default Zone Effects) to a selected drawing\n// Change the actor name as required \n\n\nlet effectActor = game.actors.getName(\"Zone Effects\")\nlet effects = effectActor.effects.entries\nlet drawing = canvas.drawings.controlled[0]\nlet content\nfor ( let effect of effects) {\ncontent  += `<option value=${effect.id}>${effect.data.label}</option>`;\n}\nnew Dialog({\n    title: 'Example',\n    content: `\n          <form class=\"flexcol\">\n            <div class=\"form-group\">\n              <select id=\"effect\">\n              ${content}\n              </select>\n            </div>\n          </form>\n        `,\n    buttons: {\n      apply: {\n          label: \"Apply\",\n          callback: async (html) => {\n            let effectId = html.find('#effect').val();\n            let effect = effects.find(i => i.id === effectId)\n            await drawing.setFlag(\"ActiveAuras\", \"IsAura\", [effect.data])\n            ActiveAuras.CollateAuras(canvas.scene._id, true, false, \"drawingAdd\")\n          }\n      }\n    }\n}).render(true)","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"AA InsectPlague","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.dotwq0M7vKllDoG4"}},"scope":"global","command":"if (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC${args[1]} Insect Plague}`;\n    let saveRoll = (await tactor.rollAbilitySave(\"con\", { flavor }))?.total;\n    if(!saveRoll) return;\n    let damageRoll = new Roll(`${args[2]-1}d10`).roll()\n    game.dice3d?.showForRoll(damageRoll)\n    let targets = new Set();\n    let saves = new Set();\n    targets.add(target);\n    saves.add(target);\n    if (saveRoll < args[1]) {\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"piercing\" }], damageRoll.total, targets, null, saves);\n    }\n    else if (saveRoll >= args[1]) {\n        MidiQOL.applyTokenDamage([{ damage: damageRoll.total / 2, type: \"piercing\" }], damageRoll.total, targets, null, saves);\n\n    }\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"nD3UfwnypyZeaJ7H"}
{"name":"AA SleetStorm","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.UcFyJEFjypjafZQH"}},"scope":"global","command":"if (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    const flavor = `${CONFIG.DND5E.abilities[\"dex\"]} DC${args[1]} Sleet Storm`;\n    let saveRoll = (await tactor.rollAbilitySave(\"dex\", { flavor }))?.total;\n    if(!saveRoll) return;\n    if (saveRoll < args[1]) {\n        game.cub.addCondition(\"Prone\", target)\n    }\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"xWy9rgoadmnmZxhy"}
{"name":"AA SpikeGrowth","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.DR7cH7FzoLAIFGMI"}},"scope":"global","command":"if (args[0] === \"on\" || args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let tactor;\n    if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n    else tactor = game.actors.get(lastArg.actorId);\n    const target = canvas.tokens.get(lastArg.tokenId)\n    let damageRoll = new Roll(`2d4`).roll()\n    let targets = new Set();\n    let saves = new Set();\n    targets.add(target);\n    saves.add(target);\n    await MidiQOL.applyTokenDamage([{ damage: damageRoll.total, type: \"piercing\" }], damageRoll.total, targets, null, saves);\n    let effect = tactor.effects.find(i => i.data.label === \"Spike Growth\")\ndebugger\n    await effect.delete()\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"zv2pCexLT2ydNPKo"}
