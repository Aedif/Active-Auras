{"name":"AA DoT","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.nsfe0IvUwY7JP4ya"}},"scope":"global","command":"if(args[0] === \"on\") {\nlet damageRoll = new Roll(`${args[1]}`).roll().toMessage({flavor: `${args[2]}`})\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"TWJ7K9Rw384oXFxV"}
{"name":"AA Cloudkill","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.YFpaXmfMg52In2h8"}},"scope":"global","command":"let lastArg = args[args.length - 1];\nlet target = canvas.tokens.get(lastArg.tokenId);\nlet tactor = target?.actor;\nlet DC = parseInt(args[1])\nif(args[0] === \"on\"){\nconst flavor = `${CONFIG.DND5E.abilities[\"con\"]} DC ${DC} Cloudkill }`;\n    let saveRoll = (await tactor.rollAbilitySave(\"con\", {flavor, fastforward: true})).total;\n    let damageRoll = new Roll(\"5d8\").roll();\n    let halfDamage = Math.floor(damageRoll.total/2);\n\n    if(saveRoll < DC ) {\n        new MidiQOL.DamageOnlyWorkflow(tactor, target, damageRoll.total, \"poison\", [target], damageRoll, {flavor: \"Cloudkill full damage\", damageList: args[0].damageList});\n\n    }\n    if(saveRoll >= DC) {\n        new MidiQOL.DamageOnlyWorkflow(tactor, target, halfDamage, \"piercing\", [target], damageRoll, {flavor: \"Cloudkill half damage\", damageList: args[0].damageList});\n    }\n}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"W7bq74uoIqIGWJKY"}
{"_id":"aMAn4QgndJAnsHhm","name":"AA ApplyEffectsToTemplate","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.fHwT4N13IcbW4D3I"},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//On use macro to apply an item's active effects to the placed template instead of applying through the normal midi QoL workflow \n// requires midi qol, furnace and Active Auras \nlet template = canvas.templates.get(args[0].templateId)\nlet effects = args[0].item.effects\nlet templateEffectData = []\nfor( let effect of effects){\n   let data = { data: duplicate(effect), parentActorId: false, parentActorLink: false, entityType: \"template\", entityId:template.id, }\n   templateEffectData.push(data)\n}\nawait template.setFlag(\"ActiveAuras\", \"IsAura\", templateEffectData)\nActiveAuras.CollateAuras(canvas.scene._id, true, false, \"spellCast\")\nreturn  {haltEffectsApplication: true}","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"k5D9wZ3qs2HWiu8m","name":"AA Apply effect to drawing","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.RukVihRspPDZRSKM"},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Standard Hotbar macro to apply an active effect from a given actor (default Zone Effects) to a selected drawing\n// Change the actor name as required \n\n\nlet effectActor = game.actors.getName(\"Zone Effects\")\nlet effects = effectActor.effects.entries\nlet drawing = canvas.drawings.controlled[0]\nlet content\nfor ( let effect of effects) {\ncontent  += `<option value=${effect.id}>${effect.data.label}</option>`;\n}\nnew Dialog({\n    title: 'Example',\n    content: `\n          <form class=\"flexcol\">\n            <div class=\"form-group\">\n              <select id=\"effect\">\n              ${content}\n              </select>\n            </div>\n          </form>\n        `,\n    buttons: {\n      apply: {\n          label: \"Apply\",\n          callback: async (html) => {\n            let effectId = html.find('#effect').val();\n            let effect = effects.find(i => i.id === effectId)\n            await drawing.setFlag(\"ActiveAuras\", \"IsAura\", [effect.data])\n            ActiveAuras.CollateAuras(canvas.scene._id, true, false, \"drawingAdd\")\n          }\n      }\n    }\n}).render(true)","author":"E4BVikjIkVl2lL2j","img":"icons/svg/dice-target.svg","actorIds":[]}
